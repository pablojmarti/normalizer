#!/usr/bin/env ruby
require 'csv'
require 'date'

# TODO: create options parser that will explain how this script will work

# TODO: Move to its own class 
def duration_converter(duration) 

  # using this milliseconds converter array which has the conversions for milliseconds in this order:
  # hour, minutes, seconds, ms
  # we will split the duration into an array on the separators :,.
  # from there we will loop through with the index which matches the conversion table and multiple the
  # value by the conversion and at the end add up the total 
  milliseconds_converter = [3600000, 60000, 1000, 1]

  begin
    duration_a = duration.split(/[:\.]/)
    ms = duration_a.each_with_index.map {|time,i| time.to_i * milliseconds_converter[i]}.inject(0, :+)
  rescue => e
    $stderr.puts e
  end

  return ms
end

# check to see if anything is passed to stdin
# if not set the value to 1 that way we can raise an error
input_csv = (STDIN.tty?) ? 1 : $stdin.read

raise "No STDIN given" if input_csv.equal?(1)

parsed_csv = CSV.parse(input_csv, headers: true)

parsed_csv.each do |row|

  # here we interpolate the timezone (US /PST) to be included in the row and then call 
  # new offset to get the time zone to be in US/EST
  # convert to string from date time and then encode to utf-8
  time = DateTime.strptime("#{row['Timestamp']}-800", '%m/%d/%y %H:%M:%S %p%z').new_offset("-500").to_s.encode("UTF-8")

  # multiply the string 0 by the difference of 5 and the length of the original zip code, 
  # which then gets prepended to the original zip code
  zip = ("0" * ( 5 - row['ZIP'].length()) + row['ZIP']).encode("UTF-8")

  full_name = row["FullName"].upcase.encode("UTF-8")
  
  foo_duration = duration_converter(row["FooDuration"])
  bar_duration = duration_converter(row["BarDuration"])

  # testing output
  puts time
  puts zip
  puts full_name
  # address is passed as is because ruby already handles for commas inside of the quoted string
  puts row["Address"].encode("UTF-8")
  puts foo_duration
  puts bar_duration
  puts foo_duration + bar_duration

  # save into new hash ensure utf-8 on object
end


# save into new hash
# at the end output as csv to stdout
